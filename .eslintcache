[{"C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\index.js":"1","C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\App.js":"2","C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\reportWebVitals.js":"3","C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\nav\\Nav.js":"4","C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\form\\login\\Login.js":"5","C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\reducers\\RootReducer.js":"6","C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\reducers\\UserReducer.js":"7","C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\form\\profile\\Profile.js":"8","C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\form\\profile\\EditProfile.js":"9","C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\form\\profile\\EditAccount.js":"10","C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\form\\profile\\DisplayUserProfile.js":"11","C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\genericComponents\\ImageUploadModal.js":"12","C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\firebase\\FirebaseConfig.js":"13","C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\form\\profile\\DisplayAccount.js":"14","C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\forum\\main\\Forum.js":"15","C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\forum\\post\\PostDisplay.js":"16","C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\forum\\post\\CreatePost.js":"17","C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\forum\\post\\Comments.js":"18","C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\genericComponents\\UserProfessionTag.js":"19","C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\forum\\post\\PostAnswer.js":"20","C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\form\\profile\\RecentPosts.js":"21","C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\form\\signup\\SignUp.js":"22","C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\redux\\store.js":"23","C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\form\\profile\\FollowerDisplay.js":"24","C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\genericComponents\\Notification.js":"25","C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\dashboard\\Dashboard.js":"26"},{"size":655,"mtime":1617121021858,"results":"27","hashOfConfig":"28"},{"size":785,"mtime":1617210891034,"results":"29","hashOfConfig":"28"},{"size":362,"mtime":499162500000,"results":"30","hashOfConfig":"28"},{"size":8410,"mtime":1617209905689,"results":"31","hashOfConfig":"28"},{"size":5918,"mtime":1617213813141,"results":"32","hashOfConfig":"28"},{"size":183,"mtime":1610041135573,"results":"33","hashOfConfig":"28"},{"size":515,"mtime":1616503008831,"results":"34","hashOfConfig":"28"},{"size":5755,"mtime":1616586668291,"results":"35","hashOfConfig":"28"},{"size":7079,"mtime":1615731938077,"results":"36","hashOfConfig":"28"},{"size":6449,"mtime":1615732501447,"results":"37","hashOfConfig":"28"},{"size":8297,"mtime":1617202416507,"results":"38","hashOfConfig":"28"},{"size":2445,"mtime":1611580107845,"results":"39","hashOfConfig":"28"},{"size":541,"mtime":1611158282733,"results":"40","hashOfConfig":"28"},{"size":1948,"mtime":1616586697923,"results":"41","hashOfConfig":"28"},{"size":9794,"mtime":1615738981774,"results":"42","hashOfConfig":"28"},{"size":16174,"mtime":1616713418431,"results":"43","hashOfConfig":"28"},{"size":3649,"mtime":1613653386154,"results":"44","hashOfConfig":"28"},{"size":7038,"mtime":1615734730732,"results":"45","hashOfConfig":"28"},{"size":1872,"mtime":1614605726698,"results":"46","hashOfConfig":"28"},{"size":6557,"mtime":1614614263823,"results":"47","hashOfConfig":"28"},{"size":2789,"mtime":1617197077414,"results":"48","hashOfConfig":"28"},{"size":5922,"mtime":1617210992403,"results":"49","hashOfConfig":"28"},{"size":639,"mtime":1616516271440,"results":"50","hashOfConfig":"28"},{"size":1105,"mtime":1616524476335,"results":"51","hashOfConfig":"28"},{"size":1980,"mtime":1616630259545,"results":"52","hashOfConfig":"28"},{"size":9119,"mtime":1617210237613,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1al9nb3",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\index.js",[],["112","113"],"C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\App.js",[],"C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\reportWebVitals.js",[],"C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\nav\\Nav.js",["114","115"],"C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\form\\login\\Login.js",[],"C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\reducers\\RootReducer.js",[],"C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\reducers\\UserReducer.js",[],"C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\form\\profile\\Profile.js",["116"],"import React, { useState, useEffect, useCallback } from \"react\";\r\nimport EditUserProfile from \"./EditProfile\";\r\nimport EditUserAccount from \"./EditAccount\";\r\nimport DisplayUserProfile from \"./DisplayUserProfile\";\r\nimport DisplayUserAccount from \"./DisplayAccount\";\r\nimport { Container, Image, Grid, Tab, Menu } from \"semantic-ui-react\";\r\nimport null_profile_pic from \"../../images/null_profile_pic.png\";\r\nimport ImageUploadModal from \"../../genericComponents/ImageUploadModal\";\r\nimport { storage } from \"../../firebase/FirebaseConfig\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { connect } from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport UserProfessionTag from \"../../genericComponents/UserProfessionTag\";\r\nimport \"../style.css\";\r\n\r\nfunction EditProfile(props) {\r\n  let urlUserId = props.match.params.id;\r\n  let parsedUrlId = parseInt(urlUserId);\r\n  let loggedInUserId = JSON.parse(sessionStorage.getItem(\"id\"));\r\n\r\n  let [displayProfileEdit, setDisplayProfileEdit] = useState(false);\r\n  let [displayAccountEdit, setDisplayAccountEdit] = useState(false);\r\n  let [image, setImage] = useState(null);\r\n  let [imageChange, setImageChange] = useState(false);\r\n\r\n  let [user, setUser] = useState({});\r\n\r\n  const saveSuccess = () => {\r\n    toast.success(\"Update Success\", {\r\n      position: toast.POSITION.BOTTOM_RIGHT,\r\n    });\r\n  };\r\n\r\n  const getImage = useCallback(() => {\r\n    storage\r\n      .ref(`images/profile_pic_id_${urlUserId}`)\r\n      .getDownloadURL()\r\n      .then((url) => setImage(url));\r\n  }, [urlUserId]);\r\n  useEffect(() => {\r\n    getImage();\r\n  }, [imageChange, getImage]);\r\n\r\n  useEffect(() => {\r\n    async function getUrlProfile() {\r\n      await axios\r\n        .get(\"http://localhost:8080/api/v1/user\", {\r\n          params: { id: parseInt(urlUserId) },\r\n        })\r\n        .then((res) => {\r\n          setUser(res.data);\r\n        });\r\n    }\r\n    getUrlProfile();\r\n    getImage();\r\n  }, [urlUserId, displayProfileEdit, displayAccountEdit, getImage]);\r\n  const panes = [\r\n    {\r\n      menuItem: (\r\n        <>\r\n          {parsedUrlId === loggedInUserId ? (\r\n            <Menu.Item disabled style={{ paddingBottom: \"30px\" }}>\r\n              <ImageUploadModal\r\n                header={\"Profile Picture Upload\"}\r\n                userId={loggedInUserId}\r\n                imageReload={() => setImageChange(!imageChange)}\r\n                triggerObj={\r\n                  <Image\r\n                    src={image ? image : null_profile_pic}\r\n                    fluid\r\n                    className=\"disabled-tab-pane\"\r\n                  />\r\n                }\r\n              />\r\n            </Menu.Item>\r\n          ) : (\r\n            <Menu.Item disabled style={{ paddingBottom: \"30px\" }}>\r\n              <Image\r\n                src={image ? image : null_profile_pic}\r\n                fluid\r\n                className=\"disabled-tab-pane\"\r\n              />\r\n            </Menu.Item>\r\n          )}\r\n        </>\r\n      ),\r\n    },\r\n\r\n    {\r\n      menuItem: \"Profile\",\r\n      render: () => (\r\n        <Tab.Pane attached={false} id=\"tab-body\">\r\n          {displayProfileEdit ? (\r\n            <EditUserProfile\r\n              profileId={urlUserId}\r\n              userId={loggedInUserId}\r\n              firstname={user.fname}\r\n              lastname={user.lname}\r\n              userAge={user.age}\r\n              userGender={user.gender}\r\n              userAddr1={user.addr1}\r\n              userAddr2={user.addr2}\r\n              userAddr3={user.addr3}\r\n              userCounty={user.county}\r\n              userCountry={user.country}\r\n              disableEditing={() => setDisplayProfileEdit(false)}\r\n              saveToast={saveSuccess}\r\n              professionId={user.profession_id}\r\n            />\r\n          ) : (\r\n            <DisplayUserProfile\r\n              firstname={user.fname}\r\n              lastname={user.lname}\r\n              userAge={user.age}\r\n              userGender={user.gender}\r\n              userAddr1={user.addr1}\r\n              userAddr2={user.addr2}\r\n              userAddr3={user.addr3}\r\n              userCounty={user.county}\r\n              userCountry={user.country}\r\n              urlId={parsedUrlId}\r\n              loggedInId={loggedInUserId}\r\n              enableEditing={() => setDisplayProfileEdit(true)}\r\n              professionId={user.profession_id}\r\n            />\r\n          )}\r\n        </Tab.Pane>\r\n      ),\r\n    },\r\n    {\r\n      menuItem: \"About\",\r\n      render: () => (\r\n        <Tab.Pane attached={false}>\r\n          {displayAccountEdit ? (\r\n            <EditUserAccount\r\n              profileId={urlUserId}\r\n              userId={loggedInUserId}\r\n              currentUsername={user.username}\r\n              currentEmail={user.email}\r\n              disableEditing={() => setDisplayAccountEdit(false)}\r\n              saveToast={saveSuccess}\r\n            />\r\n          ) : (\r\n            <DisplayUserAccount\r\n              currentEmail={user.email}\r\n              currentUsername={user.username}\r\n              fname={user.fname}\r\n              lname={user.lname}\r\n              enableEditing={() => setDisplayAccountEdit(true)}\r\n              urlId={parsedUrlId}\r\n              loggedInId={loggedInUserId}\r\n              professionId={user.profession_id}\r\n            />\r\n          )}\r\n        </Tab.Pane>\r\n      ),\r\n    },\r\n  ];\r\n  return (\r\n    <Container id=\"tab-pane-container\">\r\n      <Grid>\r\n        <Tab\r\n          id=\"tab-pane\"\r\n          menu={{\r\n            secondary: true,\r\n            vertical: true,\r\n            fluid: true,\r\n          }}\r\n          panes={panes}\r\n          defaultActiveIndex={1}\r\n        />\r\n      </Grid>\r\n      <ToastContainer />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default connect()(EditProfile);\r\n","C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\form\\profile\\EditProfile.js",[],"C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\form\\profile\\EditAccount.js",[],"C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\form\\profile\\DisplayUserProfile.js",["117","118","119","120","121"],"C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\genericComponents\\ImageUploadModal.js",[],"C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\firebase\\FirebaseConfig.js",[],"C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\form\\profile\\DisplayAccount.js",[],"C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\forum\\main\\Forum.js",["122","123","124"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  Grid,\r\n  Header,\r\n  Table,\r\n  Icon,\r\n  Input,\r\n  Popup,\r\n  Form,\r\n} from \"semantic-ui-react\";\r\nimport CreatePost from \"../post/CreatePost\";\r\nimport { connect } from \"react-redux\";\r\nimport * as moment from \"moment\";\r\nimport \"./styles.css\";\r\nimport axios from \"axios\";\r\nimport _ from \"lodash\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Forum() {\r\n  let [data, setData] = useState([]);\r\n  let [topics, setTopics] = useState([]);\r\n  let [reload, setReload] = useState(false);\r\n  let [filteredData, setFilteredData] = useState([]);\r\n  let [sortedOrder, setSortedOrder] = useState(false);\r\n  let [filterMode, setFilterMode] = useState(false);\r\n  let [parentTopic, setParentTopic] = useState();\r\n\r\n  let loggedInUserId = parseInt(sessionStorage.getItem(\"id\"));\r\n  let loggedInUser = JSON.parse(sessionStorage.getItem(\"user\"));\r\n\r\n  useEffect(() => {\r\n    async function getPosts() {\r\n      await axios\r\n        .get(\"http://localhost:8080/api/v1/posts\")\r\n        .then((res) => setData(res.data));\r\n    }\r\n    getPosts();\r\n  }, [reload]);\r\n\r\n  useEffect(() => {\r\n    async function getTopics() {\r\n      await axios.get(\"http://localhost:8080/api/v1/topics\").then((res) => {\r\n        setTopics(res.data);\r\n      });\r\n    }\r\n    getTopics();\r\n  }, []);\r\n  const subTopicList = topics.map((obj) => {\r\n    return {\r\n      key: obj.SubTopicId,\r\n      text: obj.sub_topic,\r\n      value: obj.SubTopicId,\r\n      parent_id: obj.parent_topic_id,\r\n    };\r\n  });\r\n\r\n  const uniqueTopics = [\r\n    ...new Map(\r\n      topics\r\n        .map((obj) => {\r\n          return {\r\n            key: obj.topic_id,\r\n            text: obj.topic,\r\n            value: obj.topic_id,\r\n          };\r\n        })\r\n        .map((item) => [JSON.stringify(item), item])\r\n    ).values(),\r\n  ];\r\n  const handleSearch = (e) => {\r\n    let val = e.target.value;\r\n\r\n    setFilteredData(\r\n      data.filter((item) => {\r\n        if (val == null) return data;\r\n        else if (item.title.toLowerCase().includes(val.toLowerCase())) {\r\n          return filteredData;\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (filteredData.length === 0) {\r\n      switch (sortedOrder) {\r\n        case false:\r\n          return setData(_.orderBy(data, [\"votes\"], [\"desc\"]));\r\n        case true:\r\n          return setData(_.orderBy(data, [\"votes\"], [\"asc\"]));\r\n        default:\r\n          return null;\r\n      }\r\n    }\r\n    switch (sortedOrder) {\r\n      case false:\r\n        return setFilteredData(_.orderBy(filteredData, [\"votes\"], [\"desc\"]));\r\n      case true:\r\n        return setFilteredData(_.orderBy(filteredData, [\"votes\"], [\"asc\"]));\r\n      default:\r\n        return null;\r\n    }\r\n  }, [sortedOrder]);\r\n  const handleParentTopicDropdown = (e, { value }) => {\r\n    setParentTopic(value);\r\n  };\r\n  const handleSubTopicDropdown = (e, { value }) => {\r\n    setFilteredData(\r\n      data.filter((item) => {\r\n        if (value == null) return data;\r\n        else if (item.subTopic === value) {\r\n          return filteredData;\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleFilterReset = () => {\r\n    setFilterMode(false);\r\n    setFilteredData(data);\r\n  };\r\n  return (\r\n    <Grid id=\"table-grid\">\r\n      <Grid.Column>\r\n        <Grid.Row>\r\n          <div id=\"forum-header\">\r\n            <span id=\"title\">Forum</span>\r\n            {loggedInUser ? (\r\n              <>\r\n                <CreatePost\r\n                  uniqueTopics={uniqueTopics}\r\n                  activeUser={loggedInUser.user}\r\n                  subTopicList={subTopicList}\r\n                  activeUserId={loggedInUserId}\r\n                  reload={() => setReload(!reload)}\r\n                  trigger={\r\n                    <Button id=\"button-styles\">\r\n                      <Icon name=\"add\" />\r\n                      Create Post\r\n                    </Button>\r\n                  }\r\n                />\r\n                {filterMode ? (\r\n                  <Button id=\"filter-button-style\" onClick={handleFilterReset}>\r\n                    <Icon name=\"close\" />\r\n                    Reset\r\n                  </Button>\r\n                ) : (\r\n                  <Button\r\n                    id=\"filter-button-style\"\r\n                    onClick={() => setFilterMode(true)}\r\n                  >\r\n                    <Icon name=\"filter\" />\r\n                    Filter Post\r\n                  </Button>\r\n                )}\r\n              </>\r\n            ) : null}\r\n          </div>\r\n        </Grid.Row>\r\n        {filterMode ? (\r\n          <Grid.Row>\r\n            <div id=\"filter-container\">\r\n              <Form>\r\n                <Form.Group widths=\"equal\">\r\n                  <Form.Select\r\n                    style={{ marginRight: \"20px\" }}\r\n                    options={uniqueTopics}\r\n                    onChange={handleParentTopicDropdown}\r\n                    placeholder=\"Main Topic\"\r\n                  />\r\n                  <Form.Select\r\n                    disabled={parentTopic === undefined ? true : false}\r\n                    options={\r\n                      parentTopic\r\n                        ? subTopicList.filter(\r\n                            (obj) => obj.parent_id === parentTopic\r\n                          )\r\n                        : []\r\n                    }\r\n                    onChange={handleSubTopicDropdown}\r\n                    placeholder=\"Sub Topic\"\r\n                  />\r\n                </Form.Group>\r\n              </Form>\r\n            </div>\r\n          </Grid.Row>\r\n        ) : null}\r\n\r\n        <Grid.Row>\r\n          <Table basic=\"very\" celled collapsing id=\"table\">\r\n            <Table.Header id=\"table-header\">\r\n              <Table.Row>\r\n                <Popup\r\n                  content=\"Click To Sort\"\r\n                  position=\"left center\"\r\n                  trigger={\r\n                    <Table.HeaderCell\r\n                      width={2}\r\n                      id=\"table-headers\"\r\n                      onClick={() => setSortedOrder(!sortedOrder)}\r\n                    >\r\n                      Votes\r\n                    </Table.HeaderCell>\r\n                  }\r\n                />\r\n                <Table.HeaderCell id=\"table-post-header\">\r\n                  Post\r\n                  <Input\r\n                    type=\"search\"\r\n                    icon=\"search\"\r\n                    size=\"mini\"\r\n                    className=\"post-searchterm\"\r\n                    onChange={handleSearch}\r\n                  />\r\n                </Table.HeaderCell>\r\n                <Table.HeaderCell width={4} id=\"table-headers\">\r\n                  Author\r\n                </Table.HeaderCell>\r\n              </Table.Row>\r\n            </Table.Header>\r\n            {filteredData.length > 0 ? (\r\n              <Table.Body>\r\n                {filteredData.map((post) => {\r\n                  return (\r\n                    <Table.Row>\r\n                      <Table.Cell width={2}>\r\n                        <Header as=\"h2\" textAlign=\"center\">\r\n                          <span className=\"post-header\">{post.votes}</span>\r\n                        </Header>\r\n                      </Table.Cell>\r\n\r\n                      <Table.Cell>\r\n                        <Header as=\"h3\">\r\n                          <Header.Content>\r\n                            <Link to={`/forum/post/${post.id}`}>\r\n                              <span className=\"post-header\">{post.title}</span>\r\n                            </Link>\r\n                            <Header.Subheader>\r\n                              Date Posted :\r\n                              {moment(post.date).format(\"DD/MM/YYYY\")}\r\n                            </Header.Subheader>\r\n                          </Header.Content>\r\n                        </Header>\r\n                      </Table.Cell>\r\n\r\n                      <Table.Cell width={4}>\r\n                        <Header as=\"h4\" textAlign=\"center\">\r\n                          <span className=\"post-header\">{post.author}</span>\r\n                        </Header>\r\n                      </Table.Cell>\r\n                    </Table.Row>\r\n                  );\r\n                })}\r\n              </Table.Body>\r\n            ) : (\r\n              <Table.Body>\r\n                {data.map((post) => {\r\n                  return (\r\n                    <Table.Row key={post.id}>\r\n                      <Table.Cell width={2}>\r\n                        <Header as=\"h2\" textAlign=\"center\">\r\n                          <span className=\"post-header\">{post.votes}</span>\r\n                        </Header>\r\n                      </Table.Cell>\r\n                      <Table.Cell>\r\n                        <Header as=\"h3\">\r\n                          <Header.Content>\r\n                            <Link to={`/forum/post/${post.id}`}>\r\n                              <span className=\"post-header\">{post.title}</span>\r\n                            </Link>\r\n                            <Header.Subheader>\r\n                              Date Posted :\r\n                              {moment(post.date).format(\"DD/MM/YYYY\")}\r\n                            </Header.Subheader>\r\n                          </Header.Content>\r\n                        </Header>\r\n                      </Table.Cell>\r\n                      <Table.Cell width={4}>\r\n                        <Header as=\"h4\" textAlign=\"center\">\r\n                          <span className=\"post-header\">{post.author}</span>\r\n                        </Header>\r\n                      </Table.Cell>\r\n                    </Table.Row>\r\n                  );\r\n                })}\r\n              </Table.Body>\r\n            )}\r\n          </Table>\r\n        </Grid.Row>\r\n        <Grid.Row textAlign=\"center\">\r\n          <span id=\"footer\">Showing {data.length} Results</span>\r\n        </Grid.Row>\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default connect()(Forum);\r\n","C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\forum\\post\\PostDisplay.js",["125"],"import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  Grid,\r\n  Image,\r\n  Divider,\r\n  Comment,\r\n  Header,\r\n  Form,\r\n  Button,\r\n  Icon,\r\n  Modal,\r\n  Loader,\r\n  Popup,\r\n} from \"semantic-ui-react\";\r\nimport axios from \"axios\";\r\nimport null_profile_pic from \"../../images/null_profile_pic.png\";\r\nimport { storage } from \"../../firebase/FirebaseConfig\";\r\nimport Comments from \"./Comments\";\r\nimport \"./styles.css\";\r\nimport \"./comment-styles.css\";\r\nimport * as moment from \"moment\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport UserProfessionTag from \"../../genericComponents/UserProfessionTag\";\r\nimport PostAnswer from \"./PostAnswer\";\r\n\r\nfunction PostDisplay(props) {\r\n  let urlPostId = props.match.params.id;\r\n  let [post, setPost] = useState({});\r\n  let [comments, setComments] = useState([]);\r\n  let loggedInUserId = parseInt(sessionStorage.getItem(\"id\"));\r\n  let loggedInUser = JSON.parse(sessionStorage.getItem(\"user\"));\r\n  let loggedInProfessionId = parseInt(sessionStorage.getItem(\"profession_id\"));\r\n\r\n  let [textAreaValue, setTextAreaValue] = useState(\"\");\r\n  let [editPost, setEditPost] = useState(false);\r\n  let [image, setImage] = useState(null);\r\n  let [updateComments, setUpdateComments] = useState(false);\r\n  let [updateConfirm, setUpdateConfirm] = useState(false);\r\n  let [reloadPost, setReloadPost] = useState(false);\r\n  let [editPostContent, setEditPostContent] = useState(\"\");\r\n  let [imageLoading, setImageLoading] = useState(false);\r\n  let [deleteModal, setDeleteModal] = useState(false);\r\n  let [createAnswer, setCreateAnswer] = useState(false);\r\n  let [createAnswerText, setCreateAnswerText] = useState(\"\");\r\n\r\n  const headers = {\r\n    \"Content-Type\": \"application/json\",\r\n  };\r\n  let data = {\r\n    post_id: parseInt(urlPostId),\r\n  };\r\n  async function getImage(id) {\r\n    setImageLoading(true);\r\n    try {\r\n      await storage\r\n        .ref(`images/profile_pic_id_${id}`)\r\n        .getDownloadURL()\r\n        .then((url) => {\r\n          setImage(url);\r\n          setImageLoading(false);\r\n        });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n  async function getPost() {\r\n    try {\r\n      await axios\r\n        .post(\"http://localhost:8080/api/v1/post\", data, { headers })\r\n        .then((res) => {\r\n          setPost(res.data);\r\n          setComments(res.data.comments);\r\n          setImage(getImage(res.data.authorId));\r\n        });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    getPost();\r\n  }, [updateComments, reloadPost]);\r\n\r\n  async function updatePost() {\r\n    let data = {\r\n      post_id: post.post_id,\r\n      author_id: loggedInUserId,\r\n      content: editPostContent,\r\n    };\r\n    try {\r\n      await axios\r\n        .patch(\"http://localhost:8080/api/v1/update/post\", data, {\r\n          headers,\r\n        })\r\n        .then(() => {\r\n          toast.success(\"Post Update Success\", {\r\n            position: toast.POSITION.BOTTOM_RIGHT,\r\n          });\r\n        });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n    setEditPost(false);\r\n    setUpdateConfirm(false);\r\n    setReloadPost(!reloadPost);\r\n  }\r\n  async function deletePost() {\r\n    try {\r\n      await axios\r\n        .delete(`http://localhost:8080/api/v1/delete/post/${post.post_id}`, {\r\n          headers,\r\n        })\r\n        .then(() => {\r\n          window.location = \"/forum\";\r\n          setDeleteModal(false);\r\n        });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  async function createComment() {\r\n    let data = {\r\n      comment: textAreaValue,\r\n      parent_post_id: post.post_id,\r\n      comment_author: loggedInUser.user,\r\n      comment_author_id: loggedInUserId,\r\n    };\r\n    try {\r\n      await axios\r\n        .post(\"http://localhost:8080/api/v1/comment\", data, {\r\n          headers,\r\n        })\r\n        .then(() => {\r\n          setTextAreaValue(\"\");\r\n          toast.success(\"Post Success\", {\r\n            position: toast.POSITION.BOTTOM_RIGHT,\r\n          });\r\n        });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n    setUpdateComments(!updateComments);\r\n  }\r\n\r\n  const handleTextAreaChange = (e) => {\r\n    setTextAreaValue(e.target.value);\r\n  };\r\n\r\n  const handleEditTextAreaChange = (e) => {\r\n    setEditPostContent(e.target.value);\r\n  };\r\n\r\n  const handleEditMode = (value) => {\r\n    console.log(value);\r\n    switch (value) {\r\n      case true:\r\n        return setEditPost(true);\r\n      case false:\r\n        return setEditPost(false);\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  const handleCreateAnswerTextArea = (e) => {\r\n    setCreateAnswerText(e.target.value);\r\n  };\r\n\r\n  async function handleCreateAnswer() {\r\n    let data = {\r\n      parent_post_id: post.post_id,\r\n      answer: createAnswerText,\r\n      author_id: loggedInUserId,\r\n      author: loggedInUser.user,\r\n      author_profession: loggedInProfessionId,\r\n    };\r\n    try {\r\n      await axios\r\n        .post(\"http://localhost:8080/api/v1/post/answer/create\", data, {\r\n          headers,\r\n        })\r\n        .then(() => {\r\n          setCreateAnswer(false);\r\n          setReloadPost(!reloadPost);\r\n        });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Grid celled id=\"grid\">\r\n        <Grid.Row columns={2}>\r\n          <Grid.Column\r\n            width={4}\r\n            style={{\r\n              paddingBottom: \"20px\",\r\n              textAlign: \"center\",\r\n              paddingTop: \"30px\",\r\n            }}\r\n          >\r\n            {imageLoading ? (\r\n              <Loader active>Loading</Loader>\r\n            ) : (\r\n              <>\r\n                <span id=\"author-name\">Post Author</span>\r\n                <Image\r\n                  id=\"author-profile-image\"\r\n                  size=\"small\"\r\n                  src={image ? image : null_profile_pic}\r\n                />\r\n                {post.profession_id > 0 ? (\r\n                  <div>\r\n                    <UserProfessionTag\r\n                      professionId={post.profession_id}\r\n                      style={{ marginBottom: \"10px\" }}\r\n                    />\r\n                  </div>\r\n                ) : null}\r\n                <span id=\"author-name\">{post.author}</span>\r\n                <br />\r\n                <span id=\"author-date-posted\">\r\n                  Posted : {moment(post.date).format(\"DD/MM/YYYY\")}\r\n                </span>\r\n              </>\r\n            )}\r\n          </Grid.Column>\r\n          <Grid.Column style={{ paddingLeft: \"30px\" }} width={12}>\r\n            <Grid.Row id=\"header-container\">\r\n              <span>\r\n                {post.title}\r\n                {loggedInUserId === post.authorId ? (\r\n                  <>\r\n                    <Modal\r\n                      open={deleteModal}\r\n                      size=\"small\"\r\n                      onOpen={() => setDeleteModal(true)}\r\n                      onClose={() => setDeleteModal(false)}\r\n                      closeIcon\r\n                      trigger={\r\n                        <Button icon floated=\"right\" id=\"edit-button\">\r\n                          <Icon name=\"trash\" />\r\n                        </Button>\r\n                      }\r\n                    >\r\n                      <Modal.Header>Delete Post</Modal.Header>\r\n                      <Modal.Content>\r\n                        Are you sure you want to delete this post? All\r\n                        accompanying content will be lost forever. This cannot\r\n                        be undone.\r\n                      </Modal.Content>\r\n                      <Modal.Actions>\r\n                        <Button\r\n                          icon=\"checkmark\"\r\n                          labelPosition=\"left\"\r\n                          positive\r\n                          content=\"Confirm\"\r\n                          onClick={deletePost}\r\n                        />\r\n                        <Button\r\n                          icon=\"close\"\r\n                          labelPosition=\"left\"\r\n                          content=\"Cancel\"\r\n                          onClick={() => setDeleteModal(false)}\r\n                        />\r\n                      </Modal.Actions>\r\n                    </Modal>\r\n\r\n                    <Button\r\n                      icon\r\n                      floated=\"right\"\r\n                      id=\"edit-button\"\r\n                      onClick={() => handleEditMode(true)}\r\n                    >\r\n                      <Icon name=\"edit\" />\r\n                    </Button>\r\n                  </>\r\n                ) : null}\r\n              </span>\r\n            </Grid.Row>\r\n            <Divider id=\"divider\" />\r\n            <Grid.Row id=\"post-body\">\r\n              {editPost ? (\r\n                <Form>\r\n                  <Form.TextArea\r\n                    id=\"create-comment-textarea\"\r\n                    placeholder={post.content}\r\n                    onChange={handleEditTextAreaChange}\r\n                    rows={7}\r\n                    value={editPostContent}\r\n                  />\r\n                  <Button.Group floated=\"right\">\r\n                    <Modal\r\n                      onClose={() => setUpdateConfirm(false)}\r\n                      onOpen={() => setUpdateConfirm(true)}\r\n                      closeIcon\r\n                      size=\"mini\"\r\n                      open={updateConfirm}\r\n                      trigger={\r\n                        <Button\r\n                          positive\r\n                          content=\"Update\"\r\n                          labelPosition=\"left\"\r\n                          disabled={\r\n                            editPostContent.length < 1 ||\r\n                            editPostContent.match(/[_/@\"'<>.,£!$%^&]/)\r\n                              ? true\r\n                              : false\r\n                          }\r\n                          icon=\"edit\"\r\n                          onClick={() => setUpdateConfirm(true)}\r\n                        />\r\n                      }\r\n                    >\r\n                      <Modal.Header>Update Confirm</Modal.Header>\r\n                      <Modal.Content>\r\n                        Are you sure you want to update your post?\r\n                      </Modal.Content>\r\n                      <Modal.Actions>\r\n                        <Button\r\n                          icon=\"checkmark\"\r\n                          labelPosition=\"left\"\r\n                          positive\r\n                          content=\"Confirm\"\r\n                          onClick={updatePost}\r\n                        />\r\n                      </Modal.Actions>\r\n                    </Modal>\r\n                    <Button.Or />\r\n                    <Button\r\n                      content=\"Cancel\"\r\n                      labelPosition=\"right\"\r\n                      icon=\"close\"\r\n                      onClick={() => handleEditMode(false)}\r\n                    />\r\n                  </Button.Group>\r\n                </Form>\r\n              ) : (\r\n                post.content\r\n              )}\r\n            </Grid.Row>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        {post.answer_author_id === 0 ? (\r\n          loggedInProfessionId > 0 && loggedInUserId !== post.authorId ? (\r\n            <Grid.Row>\r\n              <Grid.Column id=\"comments-col\" width={16}>\r\n                <Modal\r\n                  onClose={() => setCreateAnswer(false)}\r\n                  onOpen={() => setCreateAnswer(true)}\r\n                  closeIcon\r\n                  open={createAnswer}\r\n                  trigger={\r\n                    <Button positive id=\"answer-button\">\r\n                      <Icon name=\"plus\" />\r\n                      Answer Question\r\n                    </Button>\r\n                  }\r\n                >\r\n                  <Modal.Header>\r\n                    Answer Question\r\n                    <Popup\r\n                      content=\"Illegal Characters : /[_/@<>£$%^&]/\"\r\n                      trigger={\r\n                        <Icon\r\n                          name=\"info\"\r\n                          style={{\r\n                            position: \"relative\",\r\n                            marginLeft: \"5px\",\r\n                            top: \"-2px\",\r\n                          }}\r\n                          circular\r\n                          inverted\r\n                          size=\"tiny\"\r\n                        />\r\n                      }\r\n                    />\r\n                  </Modal.Header>\r\n                  <Modal.Content>\r\n                    <Form>\r\n                      <Form.TextArea\r\n                        rows={5}\r\n                        placeholder=\"New Answer...\"\r\n                        onChange={handleCreateAnswerTextArea}\r\n                      ></Form.TextArea>\r\n                    </Form>\r\n                  </Modal.Content>\r\n                  <Modal.Actions>\r\n                    <Button\r\n                      icon=\"checkmark\"\r\n                      labelPosition=\"left\"\r\n                      positive\r\n                      content=\"Create\"\r\n                      disabled={\r\n                        createAnswerText.length < 1 ||\r\n                        createAnswerText.match(/[_/@\"<>£$%^&]/)\r\n                          ? true\r\n                          : false\r\n                      }\r\n                      onClick={handleCreateAnswer}\r\n                    />\r\n                    <Button\r\n                      icon=\"close\"\r\n                      labelPosition=\"left\"\r\n                      content=\"Cancel\"\r\n                      onClick={() => setCreateAnswer(false)}\r\n                    />\r\n                  </Modal.Actions>\r\n                </Modal>\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n          ) : null\r\n        ) : (\r\n          <Grid.Row>\r\n            <Grid.Column id=\"comments-col\" width={16}>\r\n              <PostAnswer\r\n                answer={post.answer}\r\n                answerAuthor={post.answer_author}\r\n                answerAuthorProfession={post.answer_author_profession}\r\n                answerAuthorId={post.answer_author_id}\r\n                answerId={post.answer_id}\r\n                parentPostId={post.post_id}\r\n                headers={headers}\r\n                loggedInUserId={loggedInUserId}\r\n                reload={() => setReloadPost(!reloadPost)}\r\n              />\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n        )}\r\n\r\n        <Grid.Row columns={1}>\r\n          <Grid.Column id=\"comments-col\" width={16}>\r\n            <Comment.Group style={{ paddingBottom: \"10px\" }}>\r\n              <Header as=\"h1\" id=\"comments-header\">\r\n                Comments\r\n              </Header>\r\n\r\n              {comments\r\n                ? comments.map((comment) => {\r\n                    return (\r\n                      <span key={comment.comment_id}>\r\n                        <Comments\r\n                          incomingComment={comment}\r\n                          loggedInUserId={loggedInUserId}\r\n                          headers={headers}\r\n                          professionId={post.profession_id}\r\n                          commentId={comment.comment_id}\r\n                          reload={() => setReloadPost(!reloadPost)}\r\n                        />\r\n                      </span>\r\n                    );\r\n                  })\r\n                : null}\r\n              <Form>\r\n                <Form.TextArea\r\n                  id=\"create-comment-textarea\"\r\n                  rows={3}\r\n                  placeholder=\"Comment...\"\r\n                  onChange={handleTextAreaChange}\r\n                  value={textAreaValue}\r\n                />\r\n                <Button\r\n                  content=\"Comment\"\r\n                  labelPosition=\"left\"\r\n                  icon=\"reply\"\r\n                  disabled={\r\n                    textAreaValue.match(/[_/@\"'<>.,£!$%^&]/) ||\r\n                    textAreaValue.length < 1\r\n                      ? true\r\n                      : false\r\n                  }\r\n                  primary\r\n                  onClick={createComment}\r\n                />\r\n              </Form>\r\n            </Comment.Group>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n      <div id=\"margin-container\" />\r\n      <ToastContainer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default connect()(PostDisplay);\r\n","C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\forum\\post\\CreatePost.js",["126","127"],"import React, { useState } from \"react\";\r\nimport { Modal, Image, Form, Icon, Button } from \"semantic-ui-react\";\r\nimport _ from \"lodash\";\r\nimport axios from \"axios\";\r\n\r\nfunction CreatePost(props) {\r\n  let {\r\n    trigger,\r\n    subTopicList,\r\n    uniqueTopics,\r\n    activeUser,\r\n    activeUserId,\r\n    reload,\r\n  } = props;\r\n  const headers = {\r\n    \"Content-Type\": \"application/json\",\r\n  };\r\n\r\n  let [open, setOpen] = useState(false);\r\n  let [title, setTitle] = useState(\"\");\r\n  let [content, setContent] = useState(\"\");\r\n\r\n  let [parentTopic, setParentTopic] = useState();\r\n  let [subTopic, setSubTopic] = useState();\r\n  const data = {\r\n    title: title,\r\n    author: activeUser,\r\n    authorId: activeUserId,\r\n    topic: parentTopic,\r\n    subTopic: subTopic,\r\n    content: content,\r\n  };\r\n\r\n  const handleCloseButton = () => {\r\n    setTitle(\"\");\r\n    setContent(\"\");\r\n    setParentTopic();\r\n    setSubTopic();\r\n    setOpen(false);\r\n  };\r\n\r\n  async function handleCreateButton() {\r\n    try {\r\n      await axios\r\n        .post(\"http://localhost:8080/api/v1/posts/create\", data, { headers })\r\n        .then((res) => {\r\n          setParentTopic();\r\n          setSubTopic();\r\n          setOpen(false);\r\n          reload();\r\n        });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  const handleParentTopicDropdown = (e, { value }) => {\r\n    setParentTopic(value);\r\n    setSubTopic();\r\n  };\r\n\r\n  const handleSubTopicDropdown = (e, { value }) => {\r\n    setSubTopic(value);\r\n  };\r\n  return (\r\n    <Modal\r\n      trigger={trigger}\r\n      closeIcon\r\n      open={open}\r\n      onOpen={() => setOpen(true)}\r\n      onClose={() => setOpen(false)}\r\n    >\r\n      <Modal.Header>\r\n        <Icon name=\"chat\" />\r\n        Create New Post\r\n      </Modal.Header>\r\n      <Modal.Content>\r\n        <Form>\r\n          <Form.Input\r\n            fluid\r\n            label=\"Title\"\r\n            placeholder=\"Post Title...\"\r\n            value={title}\r\n            onChange={(e) => setTitle(e.target.value)}\r\n          />\r\n          <Form.Group widths=\"equal\">\r\n            <Form.Select\r\n              fluid\r\n              label=\"Main Topic\"\r\n              options={uniqueTopics}\r\n              onChange={handleParentTopicDropdown}\r\n              placeholder=\"Main Topic\"\r\n            />\r\n            <Form.Select\r\n              fluid\r\n              label=\"Sub Topic\"\r\n              disabled={parentTopic === undefined ? true : false}\r\n              options={\r\n                parentTopic\r\n                  ? subTopicList.filter((obj) => obj.parent_id === parentTopic)\r\n                  : []\r\n              }\r\n              onChange={handleSubTopicDropdown}\r\n              placeholder=\"Sub Topic\"\r\n            />\r\n          </Form.Group>\r\n          <Form.TextArea\r\n            rows={7}\r\n            label=\"Content\"\r\n            placeholder=\"Post Content...\"\r\n            value={content}\r\n            onChange={(e) => setContent(e.target.value)}\r\n          />\r\n        </Form>\r\n      </Modal.Content>\r\n      <Modal.Actions>\r\n        <Button onClick={handleCloseButton}>\r\n          <Icon name=\"remove\" /> Cancel\r\n        </Button>\r\n        <Button\r\n          color=\"green\"\r\n          onClick={handleCreateButton}\r\n          disabled={\r\n            title === \"\" ||\r\n            content === \"\" ||\r\n            parentTopic === undefined ||\r\n            subTopic === undefined ||\r\n            title.match(/[_@<>£$%^&]/) ||\r\n            content.match(/[_@<>£$%^&]/)\r\n              ? true\r\n              : false\r\n          }\r\n        >\r\n          <Icon name=\"checkmark\" /> Post\r\n        </Button>\r\n      </Modal.Actions>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default CreatePost;\r\n","C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\forum\\post\\Comments.js",[],"C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\genericComponents\\UserProfessionTag.js",[],"C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\forum\\post\\PostAnswer.js",[],"C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\form\\profile\\RecentPosts.js",["128","129","130","131"],"C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\form\\signup\\SignUp.js",["132","133"],"C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\redux\\store.js",[],"C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\form\\profile\\FollowerDisplay.js",[],"C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\genericComponents\\Notification.js",["134","135"],"import React, { useState, useEffect } from \"react\";\r\nimport { Icon, Table } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nfunction Notification(props) {\r\n  let { inboundNotification } = props;\r\n  let notificationType = inboundNotification.notification_type;\r\n  let [icon, setIcon] = useState(\"\");\r\n  let [text, setText] = useState(null);\r\n  useEffect(() => {\r\n    switch (notificationType) {\r\n      case 1:\r\n        setIcon(\"comment\");\r\n        setText(\r\n          <>\r\n            <Link to={`/profile/${inboundNotification.initiated_by_id}`}>\r\n              {inboundNotification.initiated_by_name}\r\n            </Link>{\" \"}\r\n            commented on your\r\n            <Link to={`/forum/post/${inboundNotification.cause_entity}`}>\r\n              {\" \"}\r\n              Post\r\n            </Link>\r\n          </>\r\n        );\r\n        break;\r\n      case 2:\r\n        setIcon(\"bolt\");\r\n        setText(\r\n          <>\r\n            <Link to={`/profile/${inboundNotification.initiated_by_id}`}>\r\n              {inboundNotification.initiated_by_name}\r\n            </Link>{\" \"}\r\n            answered your\r\n            <Link to={`/forum/post/${inboundNotification.cause_entity}`}>\r\n              {\" \"}\r\n              Post\r\n            </Link>\r\n          </>\r\n        );\r\n\r\n        break;\r\n      case 3:\r\n        setText(\r\n          <>\r\n            <Link to={`/profile/${inboundNotification.initiated_by_id}`}>\r\n              {inboundNotification.initiated_by_name}\r\n            </Link>{\" \"}\r\n            followed you!\r\n          </>\r\n        );\r\n        setIcon(\"user circle\");\r\n        break;\r\n      default:\r\n        setIcon(\"\");\r\n        break;\r\n    }\r\n  }, [inboundNotification]);\r\n\r\n  return (\r\n    <Table.Row style={{ borderBottom: \"1px solid #7d0541\" }}>\r\n      <Table.Cell width={2}>\r\n        <Icon name={icon} />\r\n      </Table.Cell>\r\n      <Table.Cell>{text}</Table.Cell>\r\n    </Table.Row>\r\n  );\r\n}\r\n\r\nexport default Notification;\r\n","C:\\Users\\Ray\\OneDrive - mycit.ie\\College\\4th Year\\FYP\\Implementation\\Fe\\fyp_fe\\src\\dashboard\\Dashboard.js",["136","137"],{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","severity":1,"message":"143","line":82,"column":6,"nodeType":"144","endLine":82,"endColumn":12,"suggestions":"145"},{"ruleId":"146","severity":1,"message":"147","line":93,"column":9,"nodeType":"148","messageId":"149","endLine":93,"endColumn":16},{"ruleId":"146","severity":1,"message":"150","line":14,"column":8,"nodeType":"148","messageId":"149","endLine":14,"endColumn":25},{"ruleId":"146","severity":1,"message":"151","line":1,"column":38,"nodeType":"148","messageId":"149","endLine":1,"endColumn":49},{"ruleId":"142","severity":1,"message":"152","line":47,"column":6,"nodeType":"144","endLine":47,"endColumn":13,"suggestions":"153"},{"ruleId":"142","severity":1,"message":"154","line":56,"column":6,"nodeType":"144","endLine":56,"endColumn":28,"suggestions":"155"},{"ruleId":"142","severity":1,"message":"156","line":143,"column":6,"nodeType":"144","endLine":143,"endColumn":13,"suggestions":"157"},{"ruleId":"158","severity":1,"message":"159","line":269,"column":11,"nodeType":"160","endLine":279,"endColumn":12},{"ruleId":"161","severity":1,"message":"162","line":75,"column":26,"nodeType":"163","messageId":"164","endLine":75,"endColumn":28},{"ruleId":"142","severity":1,"message":"165","line":103,"column":6,"nodeType":"144","endLine":103,"endColumn":19,"suggestions":"166"},{"ruleId":"161","severity":1,"message":"162","line":109,"column":26,"nodeType":"163","messageId":"164","endLine":109,"endColumn":28},{"ruleId":"142","severity":1,"message":"167","line":82,"column":6,"nodeType":"144","endLine":82,"endColumn":34,"suggestions":"168"},{"ruleId":"146","severity":1,"message":"169","line":2,"column":17,"nodeType":"148","messageId":"149","endLine":2,"endColumn":22},{"ruleId":"146","severity":1,"message":"170","line":3,"column":8,"nodeType":"148","messageId":"149","endLine":3,"endColumn":9},{"ruleId":"146","severity":1,"message":"171","line":1,"column":17,"nodeType":"148","messageId":"149","endLine":1,"endColumn":26},{"ruleId":"146","severity":1,"message":"172","line":1,"column":28,"nodeType":"148","messageId":"149","endLine":1,"endColumn":36},{"ruleId":"146","severity":1,"message":"173","line":3,"column":8,"nodeType":"148","messageId":"149","endLine":3,"endColumn":13},{"ruleId":"146","severity":1,"message":"170","line":4,"column":8,"nodeType":"148","messageId":"149","endLine":4,"endColumn":9},{"ruleId":"146","severity":1,"message":"174","line":3,"column":3,"nodeType":"148","messageId":"149","endLine":3,"endColumn":12},{"ruleId":"146","severity":1,"message":"175","line":4,"column":3,"nodeType":"148","messageId":"149","endLine":4,"endColumn":7},{"ruleId":"146","severity":1,"message":"173","line":4,"column":8,"nodeType":"148","messageId":"149","endLine":4,"endColumn":13},{"ruleId":"142","severity":1,"message":"176","line":59,"column":6,"nodeType":"144","endLine":59,"endColumn":27,"suggestions":"177"},{"ruleId":"146","severity":1,"message":"178","line":12,"column":19,"nodeType":"148","messageId":"149","endLine":12,"endColumn":30},{"ruleId":"142","severity":1,"message":"179","line":128,"column":6,"nodeType":"144","endLine":128,"endColumn":8,"suggestions":"180"},"no-native-reassign",["181"],"no-negated-in-lhs",["182"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getNotifications'. Either include it or remove the dependency array.","ArrayExpression",["183"],"no-unused-vars","'startup' is assigned a value but never used.","Identifier","unusedVar","'UserProfessionTag' is defined but never used.","'useCallback' is defined but never used.","React Hook useEffect has a missing dependency: 'getPosts'. Either include it or remove the dependency array.",["184"],"React Hook useEffect has a missing dependency: 'loggedInId'. Either include it or remove the dependency array.",["185"],"React Hook useEffect has a missing dependency: 'triggerReload'. Either include it or remove the dependency array.",["186"],"jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has missing dependencies: 'data' and 'filteredData'. Either include them or remove the dependency array. You can also do a functional update 'setFilteredData(f => ...)' if you only need 'filteredData' in the 'setFilteredData' call.",["187"],"React Hook useEffect has a missing dependency: 'getPost'. Either include it or remove the dependency array.",["188"],"'Image' is defined but never used.","'_' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'axios' is defined but never used.","'Container' is defined but never used.","'Grid' is defined but never used.","React Hook useEffect has a missing dependency: 'notificationType'. Either include it or remove the dependency array.",["189"],"'useDispatch' is defined but never used.","React Hook useEffect has missing dependencies: 'getFollowers', 'getFollowing', 'getFollowingPosts', 'getNotifications', and 'getPosts'. Either include them or remove the dependency array.",["190"],"no-global-assign","no-unsafe-negation",{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},"Update the dependencies array to be: [getNotifications, user]",{"range":"207","text":"208"},"Update the dependencies array to be: [getPosts, urlId]",{"range":"209","text":"210"},"Update the dependencies array to be: [loggedInId, urlId, userFollowers]",{"range":"211","text":"212"},"Update the dependencies array to be: [triggerReload, urlId]",{"range":"213","text":"214"},"Update the dependencies array to be: [data, filteredData, sortedOrder]",{"range":"215","text":"216"},"Update the dependencies array to be: [updateComments, reloadPost, getPost]",{"range":"217","text":"218"},"Update the dependencies array to be: [inboundNotification, notificationType]",{"range":"219","text":"220"},"Update the dependencies array to be: [getFollowers, getFollowing, getFollowingPosts, getNotifications, getPosts]",{"range":"221","text":"222"},[2158,2164],"[getNotifications, user]",[1292,1299],"[getPosts, urlId]",[1509,1531],"[loggedInId, urlId, userFollowers]",[3477,3484],"[triggerReload, urlId]",[2726,2739],"[data, filteredData, sortedOrder]",[2538,2566],"[updateComments, reloadPost, getPost]",[1699,1720],"[inboundNotification, notificationType]",[3405,3407],"[getFollowers, getFollowing, getFollowingPosts, getNotifications, getPosts]"]